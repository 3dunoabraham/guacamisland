[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;

uniform float wave_amount : hint_range(1, 10) = 5;

render_mode blend_mix,depth_draw_opaque,cull_disabled,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
const float specular = 0.5;
const float metallic = 1.0;
const float proximity_fade_distance = 0.2;
const float roughness = 0.3;
// uniform float point_size : hint_range(0,128);
uniform sampler2D texture_emission : hint_black_albedo;
uniform vec4 emission : hint_color;
uniform float emission_energy : hint_range(0.1, 2) = 1;
uniform float rim : hint_range(0,1);
uniform float rim_tint : hint_range(0,1);
uniform sampler2D texture_rim : hint_white;
//uniform vec3 uv1_scale;
//uniform vec3 uv1_offset;
//uniform vec3 uv2_scale;
//uniform vec3 uv2_offset;

float generateOffset(float x, float z, float val1, float val2, float time)
{
	float amount = wave_amount * .001;
	float speed = 1.0;
	
	float radiansX = ((mod(x + z * x * val1, amount) / amount) + (time*speed) * mod(x * 0.8 + z, 1.5)) * 2.0*3.14;
	float radiansZ = ((mod(val2 * (z * x + x * z), amount) / amount) + (time*speed) * 2.0 * mod(x, 2.0)) * 2.0*3.14;
	
	return amount * 0.5 * (sin(radiansZ) + cos(radiansX));
}

vec3 applyDistortion(vec3 vertex, float time)
{
	float xd = generateOffset(vertex.x, vertex.z, 0.2, 0.1, time);
	float yd = generateOffset(vertex.x, vertex.z, 0.1, 0.3, time);
	float zd = generateOffset(vertex.x, vertex.z, 0.15, 0.2, time);
	return vertex + vec3(xd, yd, zd);
}

void vertex() {
	VERTEX = applyDistortion(VERTEX, TIME * 0.1);
//	UV=UV*uv1_scale.xy+uv1_offset.xy;
}

void fragment() {	
	NORMAL = normalize(cross(dFdx(VERTEX), dFdy(VERTEX)));
	
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	vec3 emission_tex = texture(texture_emission,base_uv).rgb;
	EMISSION = (emission.rgb+emission_tex)*emission_energy;
	ALPHA = albedo.a * albedo_tex.a;
	float depth_tex = textureLod(DEPTH_TEXTURE,SCREEN_UV,0.0).r;
	vec4 world_pos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV*2.0-1.0,depth_tex*2.0-1.0,1.0);
	world_pos.xyz/=world_pos.w;
	ALPHA*=clamp(1.0-smoothstep(world_pos.z+proximity_fade_distance,world_pos.z,VERTEX.z),0.0,1.0);
	vec2 rim_tex = texture(texture_rim,base_uv).xy;
	RIM = rim*rim_tex.x;	RIM_TINT = rim_tint*rim_tex.y;
}
"

[resource]
shader = SubResource( 1 )
shader_param/wave_amount = 5.0
shader_param/albedo = Color( 1, 1, 1, 0.909804 )
shader_param/emission = Color( 0.0588235, 0.0235294, 0.392157, 1 )
shader_param/emission_energy = 1.0
shader_param/rim = 1.0
shader_param/rim_tint = 0.5
